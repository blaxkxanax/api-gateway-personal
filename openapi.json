{
  "openapi": "3.0.0",
  "paths": {
    "/health": {
      "get": {
        "operationId": "AppController_getHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Health check endpoint",
        "tags": [
          "health"
        ]
      }
    },
    "/oauth2/token": {
      "post": {
        "operationId": "OAuthController_token",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "OAuth"
        ]
      }
    },
    "/oauth2/clients": {
      "post": {
        "operationId": "ClientController_createClient",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new OAuth client",
        "tags": [
          "oauth2-clients"
        ]
      },
      "get": {
        "operationId": "ClientController_listClients",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List all OAuth clients",
        "tags": [
          "oauth2-clients"
        ]
      }
    },
    "/oauth2/clients/{clientId}": {
      "get": {
        "operationId": "ClientController_getClient",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get an OAuth client by Client ID",
        "tags": [
          "oauth2-clients"
        ]
      },
      "put": {
        "operationId": "ClientController_updateClient",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update an OAuth client by Client ID",
        "tags": [
          "oauth2-clients"
        ]
      },
      "delete": {
        "operationId": "ClientController_deleteClient",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Deactivate an OAuth client by Client ID (sets isActive=false)",
        "tags": [
          "oauth2-clients"
        ]
      }
    },
    "/oauth2/clients/{clientId}/rotate-secret": {
      "post": {
        "operationId": "ClientController_rotateClientSecret",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns new client secret"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Rotate client secret by Client ID",
        "tags": [
          "oauth2-clients"
        ]
      }
    },
    "/oauth2/introspect": {
      "post": {
        "operationId": "TokenController_introspectToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenIntrospectionRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenIntrospectionResponseDto"
                }
              }
            }
          }
        },
        "summary": "Introspect a token",
        "tags": [
          "oauth2-tokens"
        ]
      }
    },
    "/oauth2/revoke": {
      "post": {
        "operationId": "TokenController_revokeToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRevocationRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token revoked successfully"
          }
        },
        "summary": "Revoke a token",
        "tags": [
          "oauth2-tokens"
        ]
      }
    },
    "/apps/noxum/properties": {
      "post": {
        "description": "Retrieves properties data from the specified URL",
        "operationId": "NoxumController_getProperties",
        "parameters": [
          {
            "name": "url",
            "required": true,
            "in": "query",
            "description": "URL to fetch properties data from",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "DUF user ID (required if client is dubaiunitfinder)",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Properties data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "endpoint": {
                      "type": "string",
                      "example": "properties"
                    },
                    "url": {
                      "type": "string",
                      "example": "https://example.com"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Invalid scope"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get properties data",
        "tags": [
          "noxum"
        ]
      }
    },
    "/apps/noxum/floorplans": {
      "get": {
        "description": "Retrieves floorplans data from the specified URL",
        "operationId": "NoxumController_getFloorplans",
        "parameters": [
          {
            "name": "url",
            "required": true,
            "in": "query",
            "description": "URL to fetch floorplans data from",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Floorplans data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "endpoint": {
                      "type": "string",
                      "example": "floorplans"
                    },
                    "url": {
                      "type": "string",
                      "example": "https://example.com"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Invalid scope"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get floorplans data",
        "tags": [
          "noxum"
        ]
      }
    },
    "/apps/noxum/owners": {
      "get": {
        "description": "Retrieves owners data from the specified URL",
        "operationId": "NoxumController_getOwners",
        "parameters": [
          {
            "name": "url",
            "required": true,
            "in": "query",
            "description": "URL to fetch owners data from",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Owners data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "endpoint": {
                      "type": "string",
                      "example": "owners"
                    },
                    "url": {
                      "type": "string",
                      "example": "https://example.com"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Invalid scope"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get owners data",
        "tags": [
          "noxum"
        ]
      }
    },
    "/apps/noxum/liveowners": {
      "get": {
        "description": "Retrieves live owners data from the specified URL",
        "operationId": "NoxumController_getLiveOwners",
        "parameters": [
          {
            "name": "url",
            "required": true,
            "in": "query",
            "description": "URL to fetch live owners data from",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Live owners data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "endpoint": {
                      "type": "string",
                      "example": "liveowners"
                    },
                    "url": {
                      "type": "string",
                      "example": "https://example.com"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Invalid scope"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get live owners data",
        "tags": [
          "noxum"
        ]
      }
    },
    "/apps/noxum/combined/all": {
      "get": {
        "description": "Retrieves properties, floorplans, and owners data from the specified URL",
        "operationId": "NoxumController_getCombinedAll",
        "parameters": [
          {
            "name": "url",
            "required": true,
            "in": "query",
            "description": "URL to fetch combined data from",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Combined data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "success": {
                            "type": "boolean"
                          },
                          "endpoint": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Invalid scope"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get combined data (properties, floorplans, owners)",
        "tags": [
          "noxum"
        ]
      }
    },
    "/apps/noxum/combined/properties-owners": {
      "get": {
        "description": "Retrieves properties and owners data from the specified URL",
        "operationId": "NoxumController_getCombinedPropertiesOwners",
        "parameters": [
          {
            "name": "url",
            "required": true,
            "in": "query",
            "description": "URL to fetch combined data from",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Combined properties and owners data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "success": {
                            "type": "boolean"
                          },
                          "endpoint": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Invalid scope"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get combined properties and owners data",
        "tags": [
          "noxum"
        ]
      }
    },
    "/apps/dubaiunitfinder/auth/register": {
      "post": {
        "description": "Register a new user for Dubai Unit Finder platform",
        "operationId": "DubaiunitfinderController_register",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for additional security (will be implemented later)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "firstName",
                  "lastName",
                  "email",
                  "password"
                ],
                "properties": {
                  "firstName": {
                    "type": "string",
                    "example": "John"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "Doe"
                  },
                  "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "SecurePass123!"
                  },
                  "company": {
                    "type": "string",
                    "example": "Real Estate Co."
                  },
                  "referredBy": {
                    "type": "string",
                    "example": "ABC123XYZ456"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "User registered successfully"
                    },
                    "userId": {
                      "type": "string",
                      "example": "uuid-here"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "User already exists or invalid data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Invalid scope"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Register new user",
        "tags": [
          "dubaiunitfinder"
        ]
      }
    },
    "/apps/dubaiunitfinder/auth/signin": {
      "post": {
        "description": "Sign in an existing user to Dubai Unit Finder platform",
        "operationId": "DubaiunitfinderController_signIn",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for additional security (will be implemented later)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "SecurePass123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sign in successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Sign in successful"
                    },
                    "user": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          },
          "403": {
            "description": "Forbidden - Invalid scope"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Sign in user",
        "tags": [
          "dubaiunitfinder"
        ]
      }
    },
    "/apps/dubaiunitfinder/subscription/{userId}": {
      "get": {
        "description": "Retrieve all subscriptions for a specific user",
        "operationId": "DubaiunitfinderController_getUserSubscriptions",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for additional security (will be implemented later)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscriptions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "subscriptions": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Invalid scope"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user subscriptions",
        "tags": [
          "dubaiunitfinder"
        ]
      }
    },
    "/apps/dubaiunitfinder/subscription": {
      "post": {
        "description": "Create a new subscription for a user",
        "operationId": "DubaiunitfinderController_createSubscription",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for additional security (will be implemented later)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "userId",
                  "packageName",
                  "requestsInPackage",
                  "expiryDate"
                ],
                "properties": {
                  "userId": {
                    "type": "string",
                    "example": "uuid-here"
                  },
                  "packageName": {
                    "type": "string",
                    "example": "premium"
                  },
                  "requestsInPackage": {
                    "type": "number",
                    "example": 1000
                  },
                  "expiryDate": {
                    "type": "string",
                    "format": "date",
                    "example": "2024-12-31"
                  },
                  "price": {
                    "type": "number",
                    "example": 99.99
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Subscription created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Subscription created successfully"
                    },
                    "subscriptionId": {
                      "type": "string",
                      "example": "uuid-here"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid subscription data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Invalid scope"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create new subscription",
        "tags": [
          "dubaiunitfinder"
        ]
      }
    },
    "/apps/dubaiunitfinder/history/{userId}": {
      "get": {
        "description": "Retrieve search history for a specific user",
        "operationId": "DubaiunitfinderController_getUserHistory",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for additional security (will be implemented later)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records to return",
            "schema": {
              "example": 50,
              "type": "number"
            }
          },
          {
            "name": "x-api-key",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "History retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "history": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Invalid scope"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user history",
        "tags": [
          "dubaiunitfinder"
        ]
      }
    },
    "/apps/dubaiunitfinder/history": {
      "post": {
        "description": "Add a new search history entry",
        "operationId": "DubaiunitfinderController_addHistoryEntry",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for additional security (will be implemented later)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "userId",
                  "requestUrl"
                ],
                "properties": {
                  "userId": {
                    "type": "string",
                    "example": "uuid-here"
                  },
                  "requestUrl": {
                    "type": "string",
                    "example": "https://api.example.com/search"
                  },
                  "preview": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image data as base64 string"
                  },
                  "source": {
                    "type": "string",
                    "example": "bayut"
                  },
                  "location": {
                    "type": "object"
                  },
                  "coordinates": {
                    "type": "object"
                  },
                  "rera": {
                    "type": "object"
                  },
                  "property": {
                    "type": "object"
                  },
                  "company": {
                    "type": "string",
                    "example": "Agency LLC"
                  },
                  "buildingName": {
                    "type": "string",
                    "example": "Dubai Marina Tower"
                  },
                  "unitNumber": {
                    "type": "string",
                    "example": "1201"
                  },
                  "permitNumber": {
                    "type": "string",
                    "example": "PER123456"
                  },
                  "responseData": {
                    "type": "object"
                  },
                  "requestStatus": {
                    "type": "string",
                    "example": "success"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "History entry added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "History entry added successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid history data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Invalid scope"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add history entry",
        "tags": [
          "dubaiunitfinder"
        ]
      }
    },
    "/apps/dubaiunitfinder/admin/users": {
      "get": {
        "description": "Retrieve all users for admin management",
        "operationId": "DubaiunitfinderController_getAllUsers",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for additional security (will be implemented later)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Users per page",
            "schema": {
              "example": 50,
              "type": "number"
            }
          },
          {
            "name": "x-api-key",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "users": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "total": {
                      "type": "number",
                      "example": 150
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Invalid scope or not admin"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all users (Admin)",
        "tags": [
          "dubaiunitfinder"
        ]
      }
    },
    "/apps/dubaiunitfinder/admin/users/{userId}": {
      "get": {
        "description": "Retrieve detailed information about a specific user",
        "operationId": "DubaiunitfinderController_getUserDetails",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for additional security (will be implemented later)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "user": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Invalid scope or not admin"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user details (Admin)",
        "tags": [
          "dubaiunitfinder"
        ]
      }
    },
    "/apps/dubaiunitfinder/admin/subscriptions": {
      "get": {
        "description": "Retrieve all subscriptions for all users",
        "operationId": "DubaiunitfinderController_getAllSubscriptions",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for additional security (will be implemented later)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Subscriptions per page",
            "schema": {
              "example": 50,
              "type": "number"
            }
          },
          {
            "name": "x-api-key",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscriptions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "subscriptions": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "total": {
                      "type": "number",
                      "example": 150
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Invalid scope or not admin"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all subscriptions (Admin)",
        "tags": [
          "dubaiunitfinder"
        ]
      }
    },
    "/apps/dubaiunitfinder/admin/subscriptions/{userId}": {
      "get": {
        "description": "Retrieve all subscriptions for a specific user (admin endpoint)",
        "operationId": "DubaiunitfinderController_getUserSubscriptionsAdmin",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for additional security (will be implemented later)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User subscriptions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "subscriptions": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Invalid scope or not admin"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user subscriptions (Admin)",
        "tags": [
          "dubaiunitfinder"
        ]
      }
    },
    "/apps/dubaiunitfinder/admin/history": {
      "get": {
        "description": "Retrieve all history for all users",
        "operationId": "DubaiunitfinderController_getAllHistory",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for additional security (will be implemented later)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "History entries per page",
            "schema": {
              "example": 50,
              "type": "number"
            }
          },
          {
            "name": "x-api-key",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "History retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "history": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "total": {
                      "type": "number",
                      "example": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Invalid scope or not admin"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all history (Admin)",
        "tags": [
          "dubaiunitfinder"
        ]
      }
    },
    "/apps/dubaiunitfinder/admin/history/{userId}": {
      "get": {
        "description": "Retrieve all history for a specific user (admin endpoint)",
        "operationId": "DubaiunitfinderController_getUserHistoryAdmin",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for additional security (will be implemented later)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records to return",
            "schema": {
              "example": 50,
              "type": "number"
            }
          },
          {
            "name": "x-api-key",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User history retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "history": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Invalid scope or not admin"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user history (Admin)",
        "tags": [
          "dubaiunitfinder"
        ]
      }
    },
    "/apps/dubaiunitfinder/admin/users/{userId}/status": {
      "post": {
        "description": "Update user admin or active status",
        "operationId": "DubaiunitfinderController_updateUserStatus",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for additional security (will be implemented later)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "isAdmin": {
                    "type": "boolean",
                    "example": true
                  },
                  "isActive": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "User status updated successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid update data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Invalid scope or not admin"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update user status (Admin)",
        "tags": [
          "dubaiunitfinder"
        ]
      }
    },
    "/apps/dubaiunitfinder/admin/users/{userId}/subscription": {
      "post": {
        "description": "Manually add a subscription to a specific user",
        "operationId": "DubaiunitfinderController_addSubscriptionToUser",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API key for additional security (will be implemented later)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "packageName",
                  "requestsInPackage",
                  "expiryDate"
                ],
                "properties": {
                  "packageName": {
                    "type": "string",
                    "example": "premium"
                  },
                  "requestsInPackage": {
                    "type": "number",
                    "example": 1000
                  },
                  "expiryDate": {
                    "type": "string",
                    "format": "date",
                    "example": "2024-12-31"
                  },
                  "price": {
                    "type": "number",
                    "example": 99.99
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Subscription added to user successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Subscription added to user successfully"
                    },
                    "subscriptionId": {
                      "type": "string",
                      "example": "uuid-here"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid subscription data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Invalid scope or not admin"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add subscription to user (Admin)",
        "tags": [
          "dubaiunitfinder"
        ]
      }
    }
  },
  "info": {
    "title": "API Gateway",
    "description": "API Gateway with OAuth2.0 Client Credentials Flow",
    "version": "2.0.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "oAuth2",
      "description": "OAuth2.0 authentication endpoints"
    },
    {
      "name": "oauth2-clients",
      "description": "OAuth2.0 client management endpoints"
    },
    {
      "name": "oauth2-tokens",
      "description": "OAuth2.0 token management endpoints"
    },
    {
      "name": "health",
      "description": "Health check endpoints"
    },
    {
      "name": "noxum",
      "description": "Noxum data endpoints for properties, floorplans, and owners"
    },
    {
      "name": "dubaiunitfinder",
      "description": "Dubai Unit Finder platform endpoints for user management, subscriptions, and history"
    }
  ],
  "servers": [
    {
      "url": "http://localhost:9000/v2",
      "description": "Production server"
    },
    {
      "url": "http://localhost:9000/v2",
      "description": "Development server"
    },
    {
      "url": "http://localhost:9000",
      "description": "Local development"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "CreateClientDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "redirectUris": {
            "description": "List of allowed redirect URIs",
            "default": [
              "http://localhost:9000/auth/callback"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowedScopes": {
            "description": "List of allowed scopes",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tokenLifetimeSeconds": {
            "type": "number",
            "description": "Token lifetime in seconds. Set to 0 for non-expiring token. Allowed values: 0 (non-expiring), 3600 (1h), 10800 (3h), 21600 (6h), 43200 (12h), 86400 (24h). Defaults to 3600 (1h).",
            "default": 3600,
            "enum": [
              0,
              3600,
              10800,
              21600,
              43200,
              86400
            ]
          },
          "rateLimitCount": {
            "type": "number",
            "description": "Maximum number of requests allowed within the window. Set to 0 for unlimited. Defaults to 200.",
            "default": 200,
            "minimum": 0
          },
          "rateLimitWindowSeconds": {
            "type": "number",
            "description": "Rate limit window size in seconds. Defaults to 43200 (12 hours).",
            "default": 43200,
            "minimum": 1
          },
          "ipRestriction": {
            "type": "boolean",
            "description": "Enable IP restriction for this client. Defaults to false.",
            "default": false
          },
          "allowedIps": {
            "description": "List of allowed IPs/CIDRs if restriction is enabled. Defaults to empty.",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "redirectUris",
          "allowedScopes"
        ]
      },
      "ClientResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "clientSecret": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "redirectUris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowedScopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isActive": {
            "type": "boolean"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "tokenLifetimeSeconds": {
            "type": "number",
            "description": "Token lifetime in seconds"
          },
          "rateLimitCount": {
            "type": "number",
            "description": "Maximum requests allowed per window. 0 means unlimited."
          },
          "rateLimitWindowSeconds": {
            "type": "number",
            "description": "Rate limit window size in seconds"
          },
          "ip_restriction": {
            "type": "boolean",
            "description": "Whether IP restriction is enabled"
          },
          "allowedIps": {
            "description": "List of allowed IPs/CIDRs",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "clientId",
          "clientSecret",
          "name",
          "redirectUris",
          "allowedScopes",
          "isActive",
          "createdAt",
          "updatedAt",
          "tokenLifetimeSeconds",
          "rateLimitCount",
          "rateLimitWindowSeconds",
          "ip_restriction",
          "allowedIps"
        ]
      },
      "UpdateClientDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "redirectUris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowedScopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isActive": {
            "type": "boolean"
          },
          "tokenLifetimeSeconds": {
            "type": "number",
            "description": "Token lifetime in seconds. Set to 0 for non-expiring token. Allowed values: 0 (non-expiring), 3600 (1h), 10800 (3h), 21600 (6h), 43200 (12h), 86400 (24h).",
            "enum": [
              0,
              3600,
              10800,
              21600,
              43200,
              86400
            ]
          },
          "rateLimitCount": {
            "type": "number",
            "description": "Maximum number of requests allowed within the window. Set to 0 for unlimited.",
            "minimum": 0
          },
          "rateLimitWindowSeconds": {
            "type": "number",
            "description": "Rate limit window size in seconds.",
            "minimum": 1
          },
          "ipRestriction": {
            "type": "boolean",
            "description": "Enable IP restriction for this client."
          },
          "allowedIps": {
            "description": "List of allowed IPs/CIDRs if restriction is enabled.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TokenIntrospectionRequestDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "The token to introspect"
          }
        },
        "required": [
          "token"
        ]
      },
      "TokenIntrospectionResponseDto": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Boolean indicating whether the token is active"
          },
          "client_id": {
            "type": "string",
            "description": "Client ID associated with the token"
          },
          "username": {
            "type": "string",
            "description": "Username of the associated user, if any"
          },
          "scope": {
            "type": "string",
            "description": "Space-separated list of scopes"
          },
          "exp": {
            "type": "number",
            "description": "Token expiration timestamp in seconds since epoch"
          },
          "iat": {
            "type": "number",
            "description": "Token issuance timestamp in seconds since epoch"
          }
        },
        "required": [
          "active",
          "client_id",
          "scope",
          "exp",
          "iat"
        ]
      },
      "TokenRevocationRequestDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "The token to revoke"
          }
        },
        "required": [
          "token"
        ]
      }
    },
    "responses": {
      "BadRequestError": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "statusCode": {
                  "type": "number",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Bad Request"
                },
                "error": {
                  "type": "string",
                  "example": "Bad Request"
                }
              }
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "statusCode": {
                  "type": "number",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Unauthorized"
                },
                "error": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          }
        }
      },
      "ForbiddenError": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "statusCode": {
                  "type": "number",
                  "example": 403
                },
                "message": {
                  "type": "string",
                  "example": "Forbidden"
                },
                "error": {
                  "type": "string",
                  "example": "Forbidden"
                }
              }
            }
          }
        }
      },
      "NotFoundError": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "statusCode": {
                  "type": "number",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Not Found"
                },
                "error": {
                  "type": "string",
                  "example": "Not Found"
                }
              }
            }
          }
        }
      },
      "ConflictError": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "statusCode": {
                  "type": "number",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "Conflict"
                },
                "error": {
                  "type": "string",
                  "example": "Conflict"
                }
              }
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "statusCode": {
                  "type": "number",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                },
                "error": {
                  "type": "string",
                  "example": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    }
  }
}